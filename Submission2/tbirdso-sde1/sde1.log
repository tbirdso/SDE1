[1mtrue.[0m

consult("which_shape.pro").


[1mtrue.[0m

uA(Len,["u","u","u","u"],[]).


Len = 4.

uA(L,["u","u","u","r","u","u"],[]).


[1;31mfalse.[0m

uA(Len,[],[]).


[1;31mfalse.[0m

rA(L,["r","r","r"],[]).


L = 3.

rA(L,["u","r"],[]).


[1;31mfalse.[0m

rA(L,["r","r","u"],[]).


[1;31mfalse.[0m

dA(L,["d"],[]).


L = 1.

dA(L,["d","d","d","d","d","l"],[]).


[1;31mfalse.[0m

dA(L,["d","d","d","d","d"],[]).


L = 5.

lA(L,["l","l"],[]).


L = 2.

lA(L,[],[]).


[1;31mfalse.[0m

lA(L,["l","u","r","d"],[]).


[1;31mfalse.[0m

sq(["u","u","u","u","r","d","l"],[]).


[1mtrue.[0m

sq(["u","r","d","d"],[]).


[1;31mfalse.[0m

sq([],[]).


[1;31mfalse.[0m

sqA(["u","r","d","l"],[]).


[1mtrue.[0m

sqA(["u","u","u","u","r","d","l"],[]).


[1;31mfalse.[0m

sqA(["u","u","r","r","d","d","l","l"],[]).


[1mtrue.[0m

rctA(["u","r","d","l"],[]).


[1mtrue.[0m

rctA(["u","r","d","d","l","l"],[]).


[1;31mfalse.[0m

rctA(["u","u","r","d","d","l"],[]).


[1mtrue.[0m

grect(2,2,A).


A = ["u", "u", "r", "r", "d", "d", "l", "l"].

grect(3,1,A).


A = ["u", "u", "u", "r", "d", "d", "d", "l"].

grect(1,3,A).


A = ["u", "r", "r", "r", "d", "l", "l", "l"].

m30A(L,["m30","m30","m30","m30"],[]).


L = 4.

m30A(L,["m30","m30","m30","m30","p240"],[]).


[1;31mfalse.[0m

m30A(L,[],[]).


[1;31mfalse.[0m

p240A(L,["p240","p240","p240","p240","p240","p240"],[]).


L = 6.

p240A(L,["p240","p240","r","p240","p240","p240","p240"],[]).


[1;31mfalse.[0m

p240A(L,["m30","m30","p240","p240","p240","p240","p240","p240"],[]).


[1;31mfalse.[0m

eqtriA(["u","m30","p240"],[]).


[1mtrue.[0m

eqtriA(["u","u","u","m30","m30","m30","p240","p240","p240"],[]).


[1mtrue.[0m

[0meqtriA(["u","u","u","m30","m30","m30","p240"],[]).


[1;31mfalse.[0m

one_shift(["u","r","d","l"],Out).


Out = ["r", "d", "l", "u"].

one_shift(["5","4","3","2","1"],Out).


Out = ["4", "3", "2", "1", "5"].

[0mone_shift(["u","r","d","l"],W),one_shift(W,A),one_shift(A,B).


W = ["r", "d", "l", "u"],
A = ["d", "l", "u", "r"],
B = ["l", "u", "r", "d"].

all_shifts(["u","r","d","l"],R,4,1).


R = [["r", "d", "l", "u"], ["d", "l", "u", "r"], ["l", "u", "r", "d"]].

all_shifts(["u","r","d","l"],R,2,1).


R = [["r", "d", "l", "u"]].

all_shifts(["u","r","d","l"],R,4,3).


R = [["r", "d", "l", "u"]].

start_shifts(["u","r","d","l"],R).


R = [["r", "d", "l", "u"], ["d", "l", "u", "r"], ["l", "u", "r", "d"]].

start_shifts(["1","2","3","4"],R).


R = [["2", "3", "4", "1"], ["3", "4", "1", "2"], ["4", "1", "2", "3"]].

start_shifts([],R).


[1;31mfalse.[0m

all_cases(["u","r","d","l"],R).


R = [["u", "r", "d", "l"], ["r", "d", "l", "u"], ["d", "l", "u", "r"], ["l", "u", "r", "d"]].

all_cases(["1","2","3"],R).


R = [["1", "2", "3"], ["2", "3", "1"], ["3", "1", "2"]].

all_cases([],R).


[1;31mfalse.[0m

all_cases(["l","u","r","d"],R),try_all_sqA(R).


cyclic shift: ["u","r","d","l"] is a square.
R = [["l", "u", "r", "d"], ["u", "r", "d", "l"], ["r", "d", "l", "u"], ["d", "l", "u", "r"]].

all_cases(["l","u","r","d","d"],R),try_all_sqA(R).


[1;31mfalse.[0m

all_cases(["r","r","d","d","l","l","u","u"],R),try_all_sqA(R).


cyclic shift: ["u","u","r","r","d","d","l","l"] is a square.
R = [["r", "r", "d", "d", "l", "l", "u", "u"], ["r", "d", "d", "l", "l", "u", "u"|...], ["d", "d", "l", "l", "u", "u"|...], ["d", "l", "l", "u", "u"|...], ["l", "l", "u", "u"|...], ["l", "u", "u"|...], ["u", "u"|...], ["u"|...]].

all_cases(["u","r","d"],R),try_all_sqA(R).


[1;31mfalse.[0m

grect(2,2,W),all_cases(W,R),try_all_rctA(R).


cyclic shift: ["u","u","r","r","d","d","l","l"] is a rectangle.
W = ["u", "u", "r", "r", "d", "d", "l", "l"],
R = [["u", "u", "r", "r", "d", "d", "l", "l"], ["u", "r", "r", "d", "d", "l", "l"|...], ["r", "r", "d", "d", "l", "l"|...], ["r", "d", "d", "l", "l"|...], ["d", "d", "l", "l"|...], ["d", "l", "l"|...], ["l", "l"|...], ["l"|...]].

all_cases(["u","r","r","d","l"],R),try_all_rctA(R).


[1;31mfalse.[0m

all_cases(["u","r","r","d","l","l"],R),try_all_rctA(R).


cyclic shift: ["u","r","r","d","l","l"] is a rectangle.
R = [["u", "r", "r", "d", "l", "l"], ["r", "r", "d", "l", "l", "u"], ["r", "d", "l", "l", "u", "r"], ["d", "l", "l", "u", "r"|...], ["l", "l", "u", "r"|...], ["l", "u", "r"|...]].

all_cases(["m30","p240","u"],W),try_all_eqtriA(W).


cyclic shift: ["u","m30","p240"] is a triangle.
W = [["m30", "p240", "u"], ["p240", "u", "m30"], ["u", "m30", "p240"]].

all_cases(["p240","p240","u","u","m30","m30"],W),try_all_eqtriA(W).


cyclic shift: ["u","u","m30","m30","p240","p240"] is a triangle.
W = [["p240", "p240", "u", "u", "m30", "m30"], ["p240", "u", "u", "m30", "m30", "p240"], ["u", "u", "m30", "m30", "p240", "p240"], ["u", "m30", "m30", "p240", "p240"|...], ["m30", "m30", "p240", "p240"|...], ["m30", "p240", "p240"|...]].

all_cases(["u","r","d","l"],R),try_all_eqtriA(R).


[1;31mfalse.[0m

noprotocol.


